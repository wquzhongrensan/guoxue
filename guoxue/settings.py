"""
Django settings for guoxue project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os
import sys
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 添加路径到python解释器的搜索路径中去，以便python解释器可以搜索到此目录
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 't!2y8cgbefa^ry@%(_*%5#1+#v!o6e5-3tv@in9t3iea+te_5m'

# SECURITY WARNING: don't run with debug turned on in production!
# 开发环境中的配置
DEBUG = False
ALLOWED_HOSTS = ['*',]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'markdown',
    'DjangoUeditor',
    'users',
    'forums',
    'user_operation',
    'books',
    'articles',
    'guide',
    'xadmin',
    'reversion',
    'crispy_forms',
    'django_filters',
    'corsheaders',
    'social_django',
    'djcelery',
    'debug_toolbar',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # the middleware you just implemented
    "utils.social_auth_middleware.WeiBoAuthAlreadyAssociatedMiddleware",
]


# 设置根路由
ROOT_URLCONF = 'guoxue.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 设置模板的搜索路径,再这里执行了有ｖｕｅｂｕｉｌｄ的静态文件目录
        'DIRS': ['apps/guoxue_fe/dist'],
        # 设置是否在每个应用中搜索templates目录,此处设置为true
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]
# wsgi服务器的入口
WSGI_APPLICATION = 'guoxue.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'guoxue_test',
        'USER': 'root',
        'PASSWORD': 'mysql',
        'HOST': 'localhost',
        # 此处设置数据库的默认引擎是innodb   mysql5.1之后的默认引擎已经是innodb了。所以在这里也可以不用修改了。
        'OPTIONS': {'init_command': 'SET default_storage_engine=INNODB;'}
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

# 设置后台系统的语言为中文，并且更改时区
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# 配置静态文件的存放位置

# 逻辑地址
STATIC_URL = '/static/'
# 物理地址
# STATICFILES_DIRS = [
#     #　添加这一行来获取到vue项目的静态资源
#     os.path.join(BASE_DIR, "apps/guoxue_fe/dist/static"),
#     #     os.path.join(BASE_DIR, 'static')
# ]

STATIC_ROOT = "/var/www/guoxue/static/static"

# 配置自定义的用户替换django默认的系统用户   然后通过get_user_model()来获取user对象
AUTH_USER_MODEL = 'users.UserProfile'

# 配置用户上传的文件的存放位置
# MEDIA_ROOT = '/media/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

#  配置rest_framework
# REST_FRAMEWORK = {
#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
#     'PAGE_SIZE': 5
# }

# 配置drf  在这里进行配置是全局配置，而在视图中的配置则是局部的配置的
REST_FRAMEWORK = {
    # 'DEFAULT_PERMISSION_CLASSES': (
    #     'rest_framework.permissions.IsAuthenticated',
    # ),
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 配置限速 throttling模块
    # 'DEFAULT_THROTTLE_CLASSES': (
    #     'rest_framework.throttling.AnonRateThrottle',
    #     'rest_framework.throttling.UserRateThrottle'
    # ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '10/second',
        'user': '20/second'
    }
}

# 配置jwt
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}

# 自定义用户认证　　　第三方登录的认证后端配置
AUTHENTICATION_BACKENDS = (
    'users.views.UserAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.weibo.WeiboOAuth2',
    'social_core.backends.weixin.WeixinOAuth2',
    'social_core.backends.qq.QQOAuth2',
)

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',

    # Path to your overrided method
    # You can set any other valid path.
    'utils.social_auth_middleware.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)
# 设置服务器支持跨域请求的
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    '*',
)
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)

# CORS_ALLOW_HEADERS = (
#
# )

# 百度UEditor富文本编辑配置
UEDITOR_UPLOAD_PATH = MEDIA_ROOT

# django-redis配置   配置缓存到redis数据库中
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 配置session换成你到redis中
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# 配置缓存的过期时间
REST_FRAMEWORK_EXTENSIONS = {
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 3600
}

# 配置social_django实现第三方登录
# 其中，SOCIAL_AUTH_AUTHENTICATION_BACKENDS 、context_processors的配置在上面已经配置了

SOCIAL_AUTH_URL_NAMESPACE = 'social'

# 配置应用app的key
# WEIBO
SOCIAL_AUTH_WEIBO_KEY = '***'
SOCIAL_AUTH_WEIBO_SECRET = '***'

SOCIAL_AUTH_WEIXIN_KEY = 'foobar'
SOCIAL_AUTH_WEIXIN_SECRET = 'bazqux'

SOCIAL_AUTH_QQ_KEY = 'foobar'
SOCIAL_AUTH_QQ_SECRET = 'bazqux'

# 登录成功之后重定向的url
# 前提：配置django集成vue项目实现在同域名下访问，此时重定向的路径是"/"，　则表示重定向到首页
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'

# celery的使用
import djcelery
djcelery.setup_loader()
BROKER_URL = 'redis://127.0.0.1:6379/3'
CELERY_IMPORTS = ('users.task')
# 使用和Django一样的时区
CELERY_TIMEZONE = TIME_ZONE
# 以上为基本配置，以下为周期性任务定义
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

# 下面是定时任务的设置，我一共配置了三个定时任务.
from celery.schedules import crontab
CELERYBEAT_SCHEDULE = {
    # 定时任务一：　每24小时周期执行任务(del_redis_data)
    '删除过期的redis数据': {
        "task": "users.task.del_redis_data",
        "schedule": crontab(hour='*/24'),
        "args": (),
    },
    # 定时任务二:　每天的凌晨12:30分，执行任务(back_up1)
    '生成日报表': {
        'task': 'users.task.back_up1',
        'schedule': crontab(minute=26, hour=15),
        "args": ()
    },
    # 定时任务三:每个月的１号的6:00启动，执行任务(back_up2)
    '生成统计报表': {
            'task': 'users.task.back_up2',
            'schedule': crontab(hour=6, minute=0,   day_of_month='1'),
            "args": ()
    },
}

# 发送邮箱的配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = 'laoliangwlx@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = '***'
# 收件人看到的发件人
EMAIL_FROM = 'guoxue<laoliangwlx@163.com>'

# 本地服务器域名
LOCALHOST = "http://192.168.255.132:8007"

# 配置django-debug-tool
INTERNAL_IPS = ['192.168.255.132', ]
DEBUG_TOOLBAR_CONFIG = {
    "JQUERY_URL": '//cdn.bootcss.com/jquery/2.2.4/jquery.min.js',
}
